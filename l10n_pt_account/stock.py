# -*- coding: utf-8 -*-
# Copyright 2010-2016 ThinkOpen Solutions
# License LGPL-3.0 or later (http://www.gnu.org/licenses/lgpl).
from openerp import models, fields, api, _
from openerp.exceptions import Warning


class SaleOrder(models.Model):
    _inherit = "sale.order"

    @api.model
    def _prepare_order_picking(self, order):
        dict = super(SaleOrder, self)._prepare_order_picking(order)
        dict.update({'waybill_state': 'none'})
        return dict


class StockPicking(models.Model):
    _description = "Delivery Orders"
    _inherit = 'stock.picking'

    @api.model
    def _invoice_hook(self, picking, invoice_id):
        order_line_obj = self.env['sale.order.line']
        invoice_line_obj = self.env['account.invoice.line']
        invoice = self.env['account.invoice'].browse(invoice_id)
        if picking.sale_id:
            picking.sale_id.write({
                'invoice_ids': [(4, invoice_id)],
            })
            for sale_line in picking.sale_id.order_line:
                if sale_line.product_id.type == 'service'\
                   and not sale_line.invoiced:
                    vals = order_line_obj\
                        ._prepare_order_line_invoice_line(
                            sale_line, False)
                    vals['invoice_id'] = invoice_id
                    invoice_line_id = invoice_line_obj\
                        .create(vals)
                    sale_line.write({
                        'invoice_lines': [(6, 0, [invoice_line_id])],
                    })
                    invoice.button_compute()

    @api.model
    def _invoice_line_hook(self, move_line, invoice_line_id):
        if move_line.sale_line_id:
            line_vals = {'invoice_lines': [(4, invoice_line_id)]}
            move_line.sale_line_id.write(line_vals)

    @api.depends('name')
    def _type_picking(self):
        for picking in self:
            if picking.name.find('-return') > 0:
                picking.type_picking = 'return'
            else:
                picking.type_picking = 'none'

    @api.depends('group_id')
    def _get_sale_orders(self):
        order_pool = self.env['sale.order']
        for picking in self:
            query = [('procurement_group_id', '=', picking.group_id.id)]
            self.sale_order_ids = order_pool.search(query)

    @api.depends('sale_order_ids')
    def _sale_order_invoiced(self):
        for picking in self:
            self.invoice_state = all(order.invoice_status == 'invoiced'
                                     for order in picking.sale_order_ids)

    waybill_state = fields.Selection([
        ('waybilled', 'Waybilled'),
        ("none", "Not Applicable"),
    ], string="Waybill Control", readonly=True, default='none', copy=False)
    waybill_id = fields.Many2one('account.guia', string="Waybill", copy=False)
    type_picking = fields.Char(compute='_type_picking', string="Type Picking")
    sale_order_ids = fields.Many2many(compute='_get_sale_orders', relation='sale.order')
    invoice_state = fields.Char(compute='_sale_order_invoiced', string='Invoice State')

    @api.model
    def _prepare_invoice_line(self, group, picking,
                              move_line, invoice_id,
                              invoice_vals):
        """ Inherit the original function of the 'stock' module
            in order to correct the account in simplified invoice
        """
        invoice_line_vals = super(StockPicking, self)._prepare_invoice_line(
            group, picking, move_line, invoice_id, invoice_vals)
        fp_obj = self.env['account.fiscal.position']
        if invoice_vals['type'] ==  'simplified_invoice':
            account_id = move_line.product_id.property_account_income_id.id
            if not account_id:
                account_id = move_line.product_id.categ_id\
                    .property_account_income_categ_id.id
            if invoice_vals['fiscal_position_id']:
                fiscal_position = fp_obj.browse(
                    invoice_vals['fiscal_position_id'])
                account_id = fp_obj.map_account(
                    fiscal_position, account_id)
            if move_line.product_uos:
                uom_id = move_line.product_uos.id
            else:
                uom_id = False
            if not uom_id:
                uom_id = move_line.product_uom.id
            invoice_line_vals.update({
                'account_id': account_id,
                'uom_id': uom_id,
            })
        return invoice_line_vals

    @api.model
    def _prepare_invoice(self, picking, partner,
                         inv_type, journal_id):
        """ Inherit the original function of the 'stock' module
            in order to correct some values if the picking has been
            generated by a sales order. account_id from order partner_id,
            fiscal_position from order or property of order partner_id
        """
        invoice_vals = super(StockPicking, self)._prepare_invoice(
            picking, partner, inv_type, journal_id)
        sale = picking.sale_id
        if sale:
            if sale.fiscal_position_id:
                invoice_vals['fiscal_position_id'] = sale.fiscal_position_id.id
            else:
                invoice_vals['fiscal_position_id'] = sale.partner_id\
                    .property_account_position_id.id
            invoice_vals['account_id'] = sale.partner_id\
                .property_account_receivable.id
        return invoice_vals

    @api.model
    def _get_partner_to_invoice(self, picking):
        """ Inherit the original function of the 'stock' module
            We select the partner_invoice_id of the sales order
            as the partner of the customer invoice
        """
        if picking.sale_id:
            return picking.sale_id.partner_invoice_id
        return super(StockPicking, self)._get_partner_to_invoice(picking)

    @api.model
    def _get_partner_to_waybill(self, picking):
        """ We select the partner_invoice_id of the sales order
            as the partner of the customer invoice
        """
        if picking.sale_id:
            return picking.sale_id.partner_shipping_id
        return picking.partner_id

    @api.multi
    def action_waybill_create(self, group=False,
                              type_waybill=None, with_cost=None):
        """
        Creates waybill based on picking
        """
        context = self._context
        if type_waybill is None:
            type_waybill = context.get('type_waybill', False)
        if with_cost is None:
            with_cost = context.get('with_cost', False)
        waybill_group = {}
        res = {}
        guia_obj = self.env['account.guia']
        guia_line_obj = self.env['account.linha.guia']
        stock_move_obj = self.env['stock.move']
        for picking in self:
            # Confirm if picking is done
            if picking.state != 'done'\
               or picking.invoice_state == 'invoiced'\
               or picking.waybill_state != 'none':
                continue
            # If invoice not aplicable only create transport waybills
            if picking.invoice_state == 'none'\
               and type_waybill != 'transporte':
                continue
            # If picking is return only create devolucao waybills
            if picking.type_picking == 'return'\
               and type_waybill != 'devolucao':
                continue
            partner = picking.partner_id
            if not partner:
                raise Warning(
                    _('Please put a partner on the picking list '
                      'if you want to generate waybill.'))
            # Group pickings when same partner and same address
            if group and partner.id in waybill_group:
                guia_id = waybill_group[partner.id]['guia_id']
                waybill = guia_obj.browse(guia_id)
                waybill_vals = {
                    'origin': (waybill.origin or '') + ', ' +
                              (picking.name or '') +
                              (picking.origin and
                                  (':' + picking.origin) or ''),
                    'stock_picking_ids': [(4, picking.id)],
                    'observacoes': picking.name or ''
                }
                if waybill.sale_id:
                    if picking.sale_id.client_order_ref:
                        waybill_vals['name'] += ', ' + picking.sale_id\
                            .client_order_ref
                    if waybill.sale_id.id == picking.sale_id.id:
                        waybill_vals['sale_id'] = picking.sale_id.id
                waybill.write(waybill_vals)
            else:
                waybill_vals = {
                    'tipo': type_waybill,
                    'partner_id': partner.id,
                    'stock_picking_ids': [(4, picking.id)],
                    'company_id': picking.company_id.id,
                    'origin': picking.name or '',
                    'observacoes': (picking.name and
                                    ("Ref Ordens Entrega: " + picking.name) or
                                    '')
                }
                if picking.origin:
                    waybill_vals['origin'] += ': ' + picking.origin
                if picking.sale_order_ids:
                    waybill_vals['name'] = ', '.join(
                        (order.client_order_ref or '')
                        for order in picking.sale_order_ids)
                # Create Waybill
                guia_id = guia_obj.create(waybill_vals)
                waybill_group[partner.id] = {'guia_id': guia_id}

            # get move lines selected or if is a group creation get stock moves
            # from picking
            for line in picking.move_lines:
                if line.state == 'cancel':
                    continue
                invoice_vals = stock_move_obj._get_invoice_line_vals(
                    line, partner, 'out_invoice')
                waybill_lines = {
                    'guia_id': guia_id,
                    'product_id': line.product_id.id,
                    'uom_id': line.product_id.uom_id.id or False,
                    'price_unit': 0.0,
                    'quantity': line.product_qty,
                    'discount': 0.0,
                    'name': line.name,
                    'account_id': partner.property_account_receivable_id.id,
                    'invoice_line_tax_id': invoice_vals.get(
                        'invoice_line_tax_id', False),
                    'account_analytic_id': invoice_vals.get(
                        'account_analytic_id', False),
                    'move_line_id': line.id,
                }
                if with_cost:
                    waybill_lines['price_unit'] = invoice_vals.get(
                        'price_unit', False)
                    if type_waybill not in ('devolucao'):
                        waybill_lines['discount'] = invoice_vals.get(
                            'discount', False)
                # create waybill lines
                guia_line_obj.create(waybill_lines)
            res[picking.id] = guia_id
            picking.write({
                'waybill_id': guia_id,
                'waybill_state': 'waybilled',
            })
        return res


class StockMove(models.Model):
    _inherit = 'stock.move'

    @api.model
    def _get_invoice_line_vals(self, move, partner, inv_type):
        fp_obj = self.env['account.fiscal.position']
        product = move.product_id
        categ = product.categ_id
        # Get account_id
        if inv_type in ('out_invoice', 'out_refund'):
            account_id = product.property_account_income_id.id
            if not account_id:
                account_id = categ.property_account_income_categ_id.id
        else:
            account_id = product.property_account_expense_id.id
            if not account_id:
                account_id = categ.property_account_expense_categ_id.id
        fiscal_position = partner.property_account_position_id
        account_id = fp_obj.map_account(fiscal_position, account_id)

        # set UoS if it's a sale and the picking doesn't have one
        uos_id = move.product_uom.id
        quantity = move.product_uom_qty

        if move.procurement_id.so_line_id:
            price_unit = move.procurement_id.so_line_id.price_unit
            taxes_ids = move.procurement_id.so_line_id.tax_id.ids
        else:
            price_unit = move.product_id.lst_price
            taxes_ids = []

        return {
            'name': move.name,
            'account_id': account_id,
            'product_id': move.product_id.id,
            'uos_id': uos_id,
            'quantity': quantity,
            'price_unit': price_unit,
            'invoice_line_tax_ids': [(6, 0, taxes_ids)],
            'discount': 0.0,
            'account_analytic_id': False,
            'move_id': move.id,
        }
