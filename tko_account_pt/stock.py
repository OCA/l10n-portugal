##############################################################################
#
#    Thinkopen - Portugal & Brasil
#    Copyright (C) Thinkopen Solutions (<http://www.thinkopensolutions.com>).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Lesser General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Lesser General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

from openerp.osv import fields, osv
from openerp.tools.translate import _


class sale_order(osv.osv):
    _inherit = "sale.order"

    def _prepare_order_picking(self, cr, uid, order, context=None):
        dict = super(sale_order, self)._prepare_order_picking(
            cr, uid, order, context)
        dict.update({'waybill_state': 'none'})
        return dict


class stock_picking(osv.osv):
    _description = "Delivery Orders"
    _inherit = 'stock.picking'

    def copy(self, cr, uid, id, default=None, context=None):
        if default is None:
            default = {}
        default.update({
            'waybill_state': 'none',
            'waybill_id': False,
        })
        return super(stock_picking, self).copy(cr, uid, id, default, context)

    def _type_picking(self, cr, uid, ids, prop, unknow_none, context):
        res = {}
        for picking in self.browse(cr, uid, ids, context):
            if picking.name.find('-return') > 0:
                res[picking.id] = 'return'
            else:
                res[picking.id] = 'none'
        return res

    _columns = {
        'waybill_state': fields.selection(
            [('waybilled', 'Waybilled'), ("none", "Not Applicable")],
            "Waybill Control", readonly=True),
        'waybill_id': fields.many2one('account.guia', "Waybill"),
        'type_picking': fields.function(
            _type_picking, method=True, string="Type Picking", type="char"),
    }
    _defaults = {'waybill_state': 'none'
                 }

    def _prepare_invoice_line(self, cr, uid, group, picking, move_line,
                              invoice_id, invoice_vals, context=None):
        """ Inherit the original function of the 'stock' module in order to
            correct the account in simplified invoice
        """
        invoice_line_vals = super(stock_picking, self)._prepare_invoice_line(
            cr, uid, group, picking, move_line, invoice_id, invoice_vals,
            context=context)
        if invoice_vals['type'] in ('simplified_invoice'):
            account_id = move_line.product_id.property_account_income.id
            if not account_id:
                product_category = move_line.product_id.categ_id
                account_id = product_category.property_account_income_categ.id
            if invoice_vals['fiscal_position']:
                fp_obj = self.pool.get('account.fiscal.position')
                fiscal_position = fp_obj.browse(
                    cr, uid, invoice_vals['fiscal_position'], context=context)
                account_id = fp_obj.map_account(
                    cr, uid, fiscal_position, account_id)
            if move_line.product_uos:
                uos_id = move_line.product_uos.id
            else:
                uos_id = move_line.product_uom.id
            invoice_line_vals.update({
                'account_id': account_id,
                'uos_id': uos_id,
            })
        return invoice_line_vals

    def _prepare_invoice(self, cr, uid, picking, partner, inv_type, journal_id,
                         context=None):
        """ Inherit the original function of the 'stock' module in order to
            correct some values if the picking has been generated by a sales
            order.
            account_id from order partner_id, fiscal_position from order or
            property of order partner_id
        """
        vals = super(stock_picking, self)._prepare_invoice(
            cr, uid, picking, partner, inv_type, journal_id, context=context)
        if picking.sale_id:
            sale_order = picking.sale_id
            partner = sale_order.partner_id
            if sale_order.fiscal_position:
                vals['fiscal_position'] = sale_order.fiscal_position.id
            else:
                vals['fiscal_position'] = partner.property_account_position.id
            vals['account_id'] = partner.property_account_receivable.id
        return vals

    def _get_partner_to_invoice(self, cr, uid, picking, context=None):
        """ Inherit the original function of the 'stock' module
            We select the partner_invoice_id of the sales order as the
            partner of the customer invoice
        """
        if picking.sale_id:
            return picking.sale_id.partner_invoice_id
        return super(stock_picking, self)._get_partner_to_invoice(
            cr, uid, picking, context=context)

    def _get_partner_to_waybill(self, cr, uid, picking, context=None):
        """ We select the partner_invoice_id of the sales order as the
            partner of the customer invoice
        """
        if picking.sale_id:
            return picking.sale_id.partner_shipping_id
        return picking.partner_id

    def action_waybill_create(self, cr, uid, ids, group=False, context=None):
        """
        Creates waybill based on picking
        """
        if context is None:
            context = {}
        waybill_group = {}
        res = {}
        guia_obj = self.pool.get('account.guia')
        guia_line_obj = self.pool.get('account.linha.guia')
        stock_move_obj = self.pool.get('stock.move')
        for picking in self.browse(cr, uid, ids, context=context):
            # Confirm if picking is done
            if picking.state != 'done' or \
               picking.invoice_state == 'invoiced' or \
               picking.waybill_state != 'none':
                continue
            # If invoice not aplicable only create transport waybills
            if picking.invoice_state == 'none' and \
               context.get('type_waybill', False) != 'transporte':
                continue
            # If picking is return only create devolucao waybills
            if picking.type_picking == 'return' and \
               context.get('type_waybill', False) != 'devolucao':
                continue
            partner = picking.partner_id
            if not partner:
                raise osv.except_osv(
                    _('Error, no partner !'),
                    _('Please put a partner on the picking list if you want '
                      'to generate waybill.'))
            # Group pickings when same partner and same address
            if group and partner.id in waybill_group:
                guia_id = waybill_group[partner.id]['guia_id']
                waybill = guia_obj.browse(cr, uid, guia_id)
                origin = u''
                if waybill.origin:
                    origin += waybill.origin + u', '
                if picking.name:
                    origin += picking.name
                if picking.origin:
                    origin += u':' + picking.origin
                observacoes = waybill.observacoes
                if picking.name:
                    observacoes += u', ' + picking.name
                waybill_vals = {
                    'origin': origin,
                    'stock_picking_ids': [(4, picking.id)],
                    'observacoes': observacoes
                }
                if waybill.sale_id:
                    if picking.sale_id.client_order_ref:
                        client_order_ref = picking.sale_id.client_order_ref
                        waybill_vals['name'] += u', ' + client_order_ref
                    if waybill.sale_id.id == picking.sale_id.id:
                        waybill_vals['sale_id'] = picking.sale_id.id
                guia_obj.write(
                    cr, uid, [guia_id], waybill_vals, context=context)
            else:
                observacoes = u''
                if picking.name:
                    observacoes += _("Ref Delivery Orders: ") + picking.name
                waybill_vals = {
                    'tipo': context.get('type_waybill', False),
                    'partner_id': partner.id,
                    'stock_picking_ids': [(4, picking.id)],
                    'company_id': picking.company_id.id,
                    'origin': picking.name or '',
                    'observacoes': observacoes,
                }
                if picking.origin:
                    waybill_vals['origin'] += ': ' + picking.origin
                if picking.sale_id:
                    waybill_name = picking.sale_id.client_order_ref or ''
                    waybill_vals['name'] = waybill_name
                # Create Waybill
                guia_id = guia_obj.create(
                    cr, uid, waybill_vals, context=context)
                waybill_group[partner.id] = {'guia_id': guia_id}

            # get move lines selected or if is a group creation get stock moves
            # from picking
            for line in picking.move_lines:
                if line.state == 'cancel':
                    continue
                invoice_vals = stock_move_obj._get_invoice_line_vals(
                    cr, uid, line, partner, 'out_invoice', context=context)
                invoice_line_tax_id = invoice_vals.get(
                    'invoice_line_tax_id', False)
                account_analytic_id = invoice_vals.get(
                    'account_analytic_id', False)
                waybill_lines = {
                    'guia_id': guia_id,
                    'product_id': line.product_id.id,
                    'uos_id': line.product_id.uom_id.id or False,
                    'price_unit': 0.0,
                    'quantity': line.product_qty,
                    'discount': 0.0,
                    'name': line.name,
                    'account_id': partner.property_account_receivable.id,
                    'invoice_line_tax_id': invoice_line_tax_id,
                    'account_analytic_id': account_analytic_id,
                    'move_line_id': line.id,
                }
                if context.get('with_cost', False):
                    price_unit = invoice_vals.get('price_unit', False)
                    waybill_lines['price_unit'] = price_unit
                    if context.get('type_waybill', False) != 'devolucao':
                        discount = invoice_vals.get('discount', False)
                        waybill_lines['discount'] = discount
                # create waybill lines
                guia_line_obj.create(cr, uid, waybill_lines, context=context)
            res[picking.id] = guia_id
            vals = {'waybill_id': guia_id, 'waybill_state': 'waybilled'}
            self.write(cr, uid, [picking.id], vals)
        return res

# Redefinition of the new field in order to update the model stock.picking
# in the orm
# FIXME: this is a temporary workaround because of a framework bug
# (ref: lp996816). It should be removed as soon as the bug is fixed


class stock_picking_out(osv.osv):
    _inherit = 'stock.picking'

    def copy(self, cr, uid, id, default=None, context=None):
        if default is None:
            default = {}
        default.update({
            'waybill_state': 'none',
            'waybill_id': False,
        })
        return super(stock_picking_out, self).copy(
            cr, uid, id, default, context)

    def _type_picking(self, cr, uid, ids, prop, unknow_none, context):
        res = {}
        for picking in self.browse(cr, uid, ids, context):
            if picking.name.find('-return') > 0:
                res[picking.id] = 'return'
            else:
                res[picking.id] = 'none'
        return res

    _columns = {
        'waybill_state': fields.selection(
            [('waybilled', 'Waybilled'), ("none", "Not Applicable")],
            "Waybill Control", readonly=True),
        'waybill_id': fields.many2one('account.guia', "Waybill"),
        'type_picking': fields.function(
            _type_picking, method=True, string="Type Picking", type="char"),
    }
    _defaults = {
        'waybill_state': 'none'
    }

# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:
